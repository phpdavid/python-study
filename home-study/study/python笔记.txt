基本数据类型 ，查看类型type()
  数字
  int 整数
  float 浮点型
  bool 布尔
  complex 复数 （复数是由一个实数和一个虚数组合构成）
  str 字符串 （不可变类型）

组的定义
  序列(有序)	类似php中索引数组
	tuple 元祖类型（）,((),())  //不可变类型
	list 列表类型[ ] ,[[],[]]
	判断字符是否在序列中
		3 in [1,2,3,4]
		3 not in [1,2,3,4]
	长度
		len(1,2,3,4)
	最大
		max(1,2,3)
	最小	min(1,2,3)
	对比两个字母的大小min(a,b)，其实是对比两个字符的ascll码
  	ord() 查看字符ascll码
	合并两个序列
		[1,2,3]+[4,5,6]
		(1,2,3)+(4,5,6)

    切片(取出指定的字符)
	[1,2,3,4,5][2]
	[1,2,3,4,5][0:2]
	[1,2,3,4,5][-1:]
	[1,2,3,4,5][1,3,5]
	(1,2,3,4)[3]
	(1,2,3,4)[3:4]
	(1,2,3,4)[4:]

  set 集合(无序) {1,2,3,4} 类似php中关联数组
	不可通过下标取值，不可切片操作{1,2,3}[9] ，不重复，定义一个空的集合set()

	和序列相同的操作
		3 in {1,2,3,4}
		3 not in {1,2,3,4}
	长度
		len{1,2,3,4}
	最大
		max{1,2,3}
	最小	min{1,2,3}
  	ord() 查看字符ascll码
	求两个集合的差集	{1,2,3,4,5,6}-{4,5}
	求两个集合的交集	{1,2,3,4,5,6}&{4,5}
	求两个集合的并集	{1,2,3,4,5,6} | {4,5,9}    #合并两个集合，不能出现重复

  dict字典（key,value）类似php中关联数组
	{key1:value1,key2:value2} 字典不可以有重复的键，必须是不可变类型
	key键可以是数字和字符串
	value可以是int,str,float,list,set,dict
	字典操作
	{'a':'apple','b':'banana','o','origen'}['a'] 
===================================================================
变量和运算符
	变量在python中就是一个名字
	a = [1,2,2,4] 赋值

	起名字一定要有意义，命名可读性要强

	命名规范
	1 字母，数字，下划线
	2 首字符不能为数字
	3 系统保留的关键字不能使用
	4 区分大小写
	5 变量本身没有类型限制（python是动态语言）

	用方法名来命名变量不会报错，但是会导致方法本身不能正常使用
		type = 1   
		type(1) //报错 int abject is no t callable 


	值类型(不可改变) str,tuple,int
	引用类型（可变） set,list dist //修改后内存地址是不会改变的
		int实例
			a = 1 
			b = a
			a = 3
			print(b) //1
		list实例
			a =  [1,2,3,4]
			b = a
			a[0] = 5
			print_r(b)//5,2,3,4
			a[0] = 5

	tuple,list的区别
		id() //查看变量的内存地址，内存地址通常使用16进制表示
			a = [1,2,3,4]
			id(a) 
			hex(id(a)) //查看十六进制

		list追加元素
			a = [1,2,3,4]
			a.append(5)
			print(a) //[1,2,3,4,5]

		tuple不支持元素的追加，定义后不可改变

		多维元祖，列表
			b = (1,2,3,[1,2,[2,3,4]])
			a = (1,2,3,[1,2,3]) //元祖元素类型没有限制
			a[3][2][..] //取值

	运算符
		算数运算符
			+	加	
			-	减
			*	乘
			/	除
			//	整除
			%	取余
			**	幂运算	（2**6 2的六次方）
		赋值运算符(给变量赋值)python没有++自增 --自减运算
			=
			+=	先运算再赋值
			-=	先运算再赋值
			*=	先运算再赋值
			/=	先运算再赋值
			%= 	先运算再赋值
			//=	先运算再赋值
			**=	先运算再赋值
		比较运算符（结果是bool值，数字直接比较，字符串比较转换为ascll码进行比较，'a'>'d'，多个字符挨个进行比较'abd'>'akj';列表，元祖都可以进行比较，元素挨个比较）
			==
			!=
			>
			<
			>=
			<=
		逻辑运算符（主要操作bool类型，结果也是bool类型）
			and 并且
			or  或者
			not 不是 not true,not false

				int 0 是false,其他是true
				str list tuple set dist 空是false，其他是true
		身份运算符(两个变量赋值相同，is返回true，相当于比较运算符的“==”，比较运算符“==”比较的事两个变量的值是否相等，is比较的事两个变量的身份（内存地址）是否相等，返回的结构是bool值)
			is
			not is

			类型的判断
				1 type(1) ==int 	type函数加上关系运算符可以判断（不推荐，不能判断对象的子类）
				2 isinstance(a,str) 第一个参数是变量，第二个参数是类型（可以判断对象的子类）
				isinstance(a,[str,int,float]) 第二个参数用元祖，变量的类型，是元祖其中一个为true

		成员运算符（判断一个元素是否在一组元素（str,tuple,list,int,dist字典的成员运算是针对key,非value），结果为bool）
			in
			not in
		位运算符 （把数字当成二进制数进行运算）
			&	按位与
			|	按位或	
			^	按位异或
			~	按位取反
			<<	左移动
			>>	右移动
			>>~	右移动按位取反

分支，循环，条件与枚举
	表达式是运算符和操作数所构成的序列

	表达式的优先级
		
		同级从左到右（左结合）表达式含有赋值运算符“=” 

		将会从右向左（右结合）
		
		乘除优先加减，括号优先级高
		
		括号的优先级最高

		逻辑运算符优先级排序
			not>and>or
	经验之谈，对于复杂的表达式，在编写的时候加上括号，方便别人阅读代码

	语言的特点
	    1 不强制使用;作为结尾
	    2 不使用{},使用缩进
	    3 # 单行注释
	    4 ''' '''多行注释
	    5 python建议使用小写，两个单词用下划线连接，不使用驼峰命名
	    6 python 没有常量的概念，形式上用全部大写代表常量
	    7 缩进是四个空格

	if else
	    """
        一段小程序
        """
        user = 'abc'
        pwd = 'abc123'
        print('please input your username')
        user_input = input()
        print('please input your password')
        pass_input = input()

        if user_input == user and pass_input == pwd:
            print('welcome')
        elif user_input != user and pass_input == pwd:
            if not(1+1 < 2):
                print('1+1 ==2')
            print('username is wrong')
        elif user_input == user and pass_input != pwd:
            print("password is wrong")
        elif user_input != user and pass_input != pwd:
            print("username and password are wrong")
        else:
            print('username or password is wrong')

    python中没有switch

    循环
        while循环(常用于递归操作)
            """
            循环
            """

            condition = 0

            while condition <= 10:
                condition += 1
                if condition == 5:
                    print(55)
                print(condition)
            else: #循环结束时执行
                print('its over')

        for(主要用于遍历/循环序列或者集合，字典)
            for x in condition_list:
                # if x == 'orange_list':
                if 'orange_list' in x:
                    # break  # 强行终止循环，跳出当前的循环 orange_list 和orange_list 后面的元素不会打印
                    continue  # 跳过当前的元素 orange_list 这个元素不会打印
                print(x)
            else:  # 执行break强行终止,else的代码段将不会执行
                print('game over')

            # for x in range(0, 10, 2):  # 对应for(i=1;i<=10;i++) range：生成一个序列(第一个参数其市值，第二个参数是范围，相当于小于，第三个可选参数是步长)
            for x in range(10, 2, -2):  # 递减排列，第一个参数大于第二个参数，第三个参数为负数
                # if x % 2 == 1:
                print(x, end='|')  # end='|'是一行打印出来
            else:
                print('\n')
            # 打印位置长度的列表
            a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
            for x in range(0, len(a), 2):  # len()获取列表的长度作为range的第二个参数
                print(x, end="|")

            b = a[0:len(a):2]  # 利用列表的切片去除元素，第一个参数是起始位置，第二个是切片的长度，第三个是步长
            print(b)

            # 遍历字典,相当于PHP foreach()循环
            for a in condition_dict:
                print(a)  # 打印key
                print(condition_dict[a])  # 打印value

            for key in condition_dict.keys():  # keys()打印key
                print(key)

            for value in condition_dict.values():  # 使用value()打印value
                print(value)
            # 使用items()遍历key,value
            for kv in condition_dict.items():  # 遍历字典项
                print(kv)
            for key, value in condition_dict.items():
                print(key + ':' + value)


包，模块，函数，变量和作用域
    python项目的组织结构
        包-----
            python最顶级的组织结构（可以理解为文件夹）
            模块-----
                python第二个层级（可以理解为文件夹下的文件，直接在模块下写代码不是很好的方式）
                一个模块可以有多个类，模块并不只能写类，也可以写函数和变量，甚至是业务逻辑，但是不推荐，推荐写到类里
                类-----

                    函数，变量-----

            包和模块命名
                包的名字就是文件夹的名字
                保重必须包含一个__init__.py文件
                模块的名字就是文件的名字
            import 导入模块
                import t.firstf as tf #导入的是一个模块t是目录（包）名，firstf是模块名 as 别名
                from t import firstf #导入模块
                from t.firstf import a #导入的是一个具体的变量 from 包名.模块名 import 变量名
                from t.firstf import a,b,c #引入多个变量（python建议一行代码不超过80个字符）
                from t.firstf import a,b,c,\
                d#换行“\”,很丑，不推荐使用
                from t.firstf import (a,b,c,
                d) #使用小括号
                from t.firstf import * #导入模块下所有的变量，不推荐这么使用
                print(tf.a)#使用变量，包名.模块名.变量名
            模块的内置属性
                __all__ = ['a', 'c']  # 控制*号的变量范围

            __init__.py文件
                当一个包被导入的时候，__init__.py文件首先被执行，自动运行
                在项目中常被用做初始化文件，类似PHP构造文件
                __all__ = ['模块名'] #当使用from t.firstf import * 导入全部模块的时候，过滤模块
                在__init__引入（import）公用的包，然后在模块中import __init__文件的包名,达到公用的目的

            包和模块是不会被重复导入的
            不要循环引入，p1引入p2，p2中也引入了p1

第八章函数
	函数是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段。

	定义一个函数
		函数代码块以 def 关键词开头，后接函数标识符名称和圆括号()。
		任何传入参数和自变量必须放在圆括号中间。圆括号之间可以用于定义参数。
		函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。
		函数内容以冒号起始，并且缩进。
		return [表达式] 结束函数，选择性地返回一个值给调用方。不带表达式的return相当于返回 None。
		函数遇到return,之后的语句是不会执行的

	实例
		def functionname( parameters ):
		   "函数_文档字符串"
		   function_suite
		   return [expression]
    返回多个结果
        def damage(skill1, skill2):
            damage1 = skill1 * 3
            damage2 = skill2 * 4
            return damage1, damage2  # 直接return多个结果


        damages = damage(6, 9)
        print(damages, type(damages))  # 返回的结果是tuple
        damages[0],damages[1] 可以访问，这种直接通过序号访问是非常不好的，不推荐

        这种赋值方式叫“序列解包”
        damages_result1, damages_result2 = damage(99, 66)  # 赋值给两个变量，有助于代码更加的清晰
        print(damages_result1, damages_result2)






























