面向对象
    类:最重要的作用是封装，最基本的原则：自负责定义和刻画一些东西，不负责执行
    对象：
    关键字 class
        变量两个单词建议用_连接student_say
        类两个单词建议用首字母大写StudentSay
    示例
        # 学生类
        class Student:
            name = ''
            age = 0

            def print_file(self): #这里必须要加self
                print('name:' + self.name)
                print('age:' + str(self.age))


            student = Student()  # 示例中在一个文件，正式环境中不要在一个文件中又定义类，又实例化，调用
            student.print_file()
    方法和函数的区别
        方法和函数没有绝对的区别
        C,C++叫做函数，java，C#叫做方法
        方法是面向对象中的概念，面向对象更加关注的是设计
        函数更多的是面向过程中的概念
        变量在类中的被称作数据成员
    类和对象
        1 类是现实时间或思想世界中的实体在计算机中的反映，它将数据和对数据的操作封装在一起
          类中定义的是类的行为和体征，比如人（类）特征有姓名，年龄，身高等，行为有，说话，走路。
          但是人没有打印的行为，打印是打印机的行为，所以在人（类）中不要有打印的行为。
        2 类是一个群体的共有特征和行为的概括，具体描述一个事物就要用到对象
        3 对象就是描述一个具体的人和事物
    构造函数
        def __init__():实例化类的时候自动执行,但是构造函数可以手动调用，返回none,并且不可以自定义返回值，只能返回none
**  在python中局部变量不会覆盖全局变量
    类变量和实例变量
        类变量是和类相关联的变量
        实例变量是和实例相关联的变量
    __dict__内置变量，打印出类所有的变量
        print(student.__dict__) #打印出类包含的元素
        print(Student.__dict__)
    当我们访问一个类的变量的时候，类会先到实例变量（构造函数中找），如果没有就去找类变量，如果类中没有
    将会去父类中寻找
    操作类变量
            def __init__(self, name, age):
                # 初始化对象的属性
                self.name = name  # 实例变量
                self.age = age
                # self.__class__.sum+=1 #操作类变量加一操作
                # print(self.__class__.sum)
    类方法
        定义
                @classmethod  # 装饰器
                def plus_count(cls):  # 主要用于操作类变量的操作
                    cls.sum += 1
                    print(cls.sum)

                Student.plus_count()  ##调用类方法
                实例化对象也可以调用类方法，但是不建议这么做，容易混淆类和对象的概念
    静态方法
        定义
                # 定义静态方法
                @staticmethod
                def make_wood(x, y):  # 不需要cls,self这些关键字
                    print("this is a static method")
        调用
                student.make_wood(1, 2)  # 对象调用
                Student.make_wood(3, 4)  # 类调用
    类方法和静态方法不可以调用实例变量
    静态方法和普通方法没有太多区别，而且类方法也可以方法类变量，可以代替静态方法，
    当静态方法和类和对象没有太大关系的时候用，最好
    原则上不推荐使用静态方法

    公开和私有（私有没有关键字，通过在名字前面加两个下划线表示私有,严格意义上来说，python
               是没有私有的，通过__dict__查看元素名称依然可以打印出来）
            # 私有函数
            __name = 'xiaoming'  # 姓名，年龄是个体的属性，不是群体的属性，不建议
            # 共有函数
            name = 'david'
            # 私有方法
            def __get(self):
                print(self.score)

            # 共有方法
            def get(self):
                print(self.score)

    面向对象三大特性
        继承性
            # 学生类
            from three import Human  # 导入模块


            class Student(Human):  # 继承父类，括号中是父类
            构造方法继承
            super(Student, self).__init__(name, age)  # super关键字调用父类的构造函数
            super(Student, self).say() #继承父类的方法

            多继承

        封装性
        多态性

